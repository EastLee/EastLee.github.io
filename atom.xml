<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-10T07:20:12.114Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>EastLee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESL模块处理过程</title>
    <link href="http://yoursite.com/2016/05/10/esl-run-route/"/>
    <id>http://yoursite.com/2016/05/10/esl-run-route/</id>
    <published>2016-05-10T06:07:23.000Z</published>
    <updated>2016-05-10T07:20:12.114Z</updated>
    
    <content type="html">&lt;h2 id=&quot;ESL是什么&quot;&gt;&lt;a href=&quot;#ESL是什么&quot; class=&quot;headerlink&quot; title=&quot;ESL是什么&quot;&gt;&lt;/a&gt;ESL是什么&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/EastLee/esl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ESL&lt;/a&gt;是一个浏览器端、符合AMD的标准加载器，适合于现代web浏览器端应用的入口与模块管理。&lt;br&gt;相比于RequireJS拥有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;体积更小&lt;/li&gt;
&lt;li&gt;性能更高&lt;/li&gt;
&lt;li&gt;更健壮&lt;/li&gt;
&lt;li&gt;不支持非浏览器端使用&lt;/li&gt;
&lt;li&gt;依赖模块用时定义&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ESL模块加载详解&quot;&gt;&lt;a href=&quot;#ESL模块加载详解&quot; class=&quot;headerlink&quot; title=&quot;ESL模块加载详解&quot;&gt;&lt;/a&gt;ESL模块加载详解&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;esl.js加载模块过程如下：&lt;br&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ESL是什么&quot;&gt;&lt;a href=&quot;#ESL是什么&quot; class=&quot;headerlink&quot; title=&quot;ESL是什么&quot;&gt;&lt;/a&gt;ESL是什么&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/EastLee/esl&quot;&gt;ESL&lt;/a&gt;是一个浏览器端、符合AMD的标准加载器，适合于现代web浏览器端应用的入口与模块管理。&lt;br&gt;相比于RequireJS拥有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;体积更小&lt;/li&gt;
&lt;li&gt;性能更高&lt;/li&gt;
&lt;li&gt;更健壮&lt;/li&gt;
&lt;li&gt;不支持非浏览器端使用&lt;/li&gt;
&lt;li&gt;依赖模块用时定义&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ESL模块加载详解&quot;&gt;&lt;a href=&quot;#ESL模块加载详解&quot; class=&quot;headerlink&quot; title=&quot;ESL模块加载详解&quot;&gt;&lt;/a&gt;ESL模块加载详解&lt;/h2&gt;
    
    </summary>
    
      <category term="前端模块化" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
      <category term="esl" scheme="http://yoursite.com/tags/esl/"/>
    
  </entry>
  
  <entry>
    <title>移动端之webp图片</title>
    <link href="http://yoursite.com/2016/04/27/image-to-webp/"/>
    <id>http://yoursite.com/2016/04/27/image-to-webp/</id>
    <published>2016-04-27T13:38:17.000Z</published>
    <updated>2016-05-07T09:05:33.593Z</updated>
    
    <content type="html">&lt;h2 id=&quot;webp是什么？&quot;&gt;&lt;a href=&quot;#webp是什么？&quot; class=&quot;headerlink&quot; title=&quot;webp是什么？&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=tL9ztrug4h__GQfPznbD0O4-6iDZ5eLEsXdHZ-3crUE0GTcwmwXPtZi4Yvu4P4H2iGq4ru9XNBPG21zYm9FHqa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webp是什么？&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。但WebP是一种有损压缩。相较编码JPEG文件，编码同样质量的WebP文件需要占用更多的计算资源。&lt;/p&gt;
&lt;h2 id=&quot;目前使用情况&quot;&gt;&lt;a href=&quot;#目前使用情况&quot; class=&quot;headerlink&quot; title=&quot;目前使用情况&quot;&gt;&lt;/a&gt;目前使用情况&lt;/h2&gt;&lt;p&gt;国外的网站：Youtube、Facebook.etc&lt;br&gt;国内的网站：腾讯、淘宝、美团等&lt;br&gt; &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;webp兼容性&quot;&gt;&lt;a href=&quot;#webp兼容性&quot; class=&quot;headerlink&quot; title=&quot;webp兼容性&quot;&gt;&lt;/a&gt;webp兼容性&lt;/h2&gt;&lt;h3 id=&quot;支持&quot;&gt;&lt;a href=&quot;#支持&quot; class=&quot;headerlink&quot; title=&quot;支持&quot;&gt;&lt;/a&gt;支持&lt;/h3&gt;&lt;p&gt;chrome opera&lt;br&gt;4s uc&lt;br&gt;5 uc&lt;br&gt;5s uc&lt;br&gt;6 uc&lt;br&gt;6s uc&lt;br&gt;华为荣耀6 qq内置浏览器 微信 uc 自带浏览器&lt;br&gt;魅族 微信 uc 自带浏览器&lt;br&gt;三星（Galay S4） uc 自带浏览器 QQ浏览器&lt;br&gt;红米1s（andr4.3） uc QQ浏览器-v6.4.1 自带浏览器&lt;/p&gt;
&lt;h3 id=&quot;不支持&quot;&gt;&lt;a href=&quot;#不支持&quot; class=&quot;headerlink&quot; title=&quot;不支持&quot;&gt;&lt;/a&gt;不支持&lt;/h3&gt;&lt;p&gt;58app-v6.5.7&lt;br&gt;4s safari&lt;br&gt;5 safari&lt;br&gt;5s safari&lt;br&gt;6 safari&lt;br&gt;6s safari&lt;br&gt;5s qq内置浏览器&lt;br&gt;6 qq内置浏览器&lt;br&gt;6s qq内置浏览器&lt;br&gt;QQ浏览器-v6.0&lt;br&gt;QQ浏览器-v6.4&lt;br&gt;5微信&lt;br&gt;5s微信&lt;br&gt;6微信&lt;br&gt;6s微信&lt;br&gt;5s 高速浏览器&lt;/p&gt;
&lt;h2 id=&quot;如何转换&quot;&gt;&lt;a href=&quot;#如何转换&quot; class=&quot;headerlink&quot; title=&quot;如何转换&quot;&gt;&lt;/a&gt;如何转换&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://zhitu.isux.us/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;智图&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://isparta.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iSparta&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;libwebp&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h2&gt;&lt;h3 id=&quot;js检测，准备两套图片路径&quot;&gt;&lt;a href=&quot;#js检测，准备两套图片路径&quot; class=&quot;headerlink&quot; title=&quot;js检测，准备两套图片路径&quot;&gt;&lt;/a&gt;js检测，准备两套图片路径&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; kTestImages = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lossy: &lt;span class=&quot;string&quot;&gt;&quot;UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lossless: &lt;span class=&quot;string&quot;&gt;&quot;UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alpha: &lt;span class=&quot;string&quot;&gt;&quot;UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animation: &lt;span class=&quot;string&quot;&gt;&quot;UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; img = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Image();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = (img.width &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (img.height &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    callback(feature, result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img.onerror = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    callback(feature, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img.src = &lt;span class=&quot;string&quot;&gt;&quot;data:image/webp;base64,&quot;&lt;/span&gt; + kTestImages[feature];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用webp-js&quot;&gt;&lt;a href=&quot;#使用webp-js&quot; class=&quot;headerlink&quot; title=&quot;使用webp.js&quot;&gt;&lt;/a&gt;使用webp.js&lt;/h3&gt;&lt;p&gt;插件将会捕捉页面中使用WebP格式的img元素，并用Flash进行替换。图像的解码及显示都在Flash中完成，因此目前版本对CSS设置的背景图片无效。&lt;br&gt;当然，作为JPEG格式的替换，只有对较大的图像使用才有意义，否则过多的解码将消耗大量的资源。&lt;br&gt;3、用html5中提供的picture元素选择图片格式（浏览器支持的情况不好）&lt;/p&gt;
&lt;h3 id=&quot;server-response（Accept和varry）&quot;&gt;&lt;a href=&quot;#server-response（Accept和varry）&quot; class=&quot;headerlink&quot; title=&quot;server-response（Accept和varry）&quot;&gt;&lt;/a&gt;server-response（Accept和varry）&lt;/h3&gt;&lt;h4 id=&quot;Accept&quot;&gt;&lt;a href=&quot;#Accept&quot; class=&quot;headerlink&quot; title=&quot;Accept&quot;&gt;&lt;/a&gt;Accept&lt;/h4&gt;&lt;p&gt;iphone4s&lt;br&gt;uc无Accept请求头&lt;br&gt;Safari Accept:*/*&lt;br&gt;微信 Accept:*/*&lt;br&gt;QQ浏览器-v6.4 Accept:*/*&lt;br&gt;小米4&lt;br&gt;uc：Accept:image/webp&lt;br&gt;自带浏览器：Accept:image/webp&lt;br&gt;chrome：Accept:image/webp&lt;br&gt;QQ浏览器：Accept:image/webp&lt;br&gt;并不是所有的请求头都包含images/webp 目前只有opera有&lt;/p&gt;
&lt;h4 id=&quot;varry&quot;&gt;&lt;a href=&quot;#varry&quot; class=&quot;headerlink&quot; title=&quot;varry&quot;&gt;&lt;/a&gt;varry&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(client)  &amp;gt;  Accept: image/jpeg, image/png, image/mif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(server) &amp;gt;  Content-Type: image/mif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;gt;  Vary: Accept&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;gt;  (object)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;优势&quot;&gt;&lt;a href=&quot;#优势&quot; class=&quot;headerlink&quot; title=&quot;优势&quot;&gt;&lt;/a&gt;优势&lt;/h2&gt;&lt;p&gt;WebP is a new image format that provides lossless and lossy compression for images on the web. WebP lossless images are 26% smaller in size compared to PNGs. WebP lossy images are 25-34% smaller in size compared to JPEG images at equivalent SSIM index. WebP supports lossless transparency (also known as alpha channel) with just 22% additional bytes. Transparency is also supported with lossy compression and typically provides 3x smaller file sizes compared to PNG when lossy compression is acceptable for the red/green/blue color channels.&lt;/p&gt;
&lt;h2 id=&quot;参考文献：&quot;&gt;&lt;a href=&quot;#参考文献：&quot; class=&quot;headerlink&quot; title=&quot;参考文献：&quot;&gt;&lt;/a&gt;参考文献：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://isux.tencent.com/introduction-of-webp.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebP 探寻之路&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developers.google.com/speed/webp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A new image format for the Web&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.igvita.com/2012/12/18/deploying-new-image-formats-on-the-web/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deploying New Image Formats on the Web&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;How To Reduce Image Size With WebP Automagically&quot;&gt;How To Reduce Image Size With WebP Automagically&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.etherdream.com/WebP/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;让你的页面支持WebP图像&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webp是什么？&quot;&gt;&lt;a href=&quot;#webp是什么？&quot; class=&quot;headerlink&quot; title=&quot;webp是什么？&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=tL9ztrug4h__GQfPznbD0O4-6iDZ5eLEsXdHZ-3crUE0GTcwmwXPtZi4Yvu4P4H2iGq4ru9XNBPG21zYm9FHqa&quot;&gt;webp是什么？&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。但WebP是一种有损压缩。相较编码JPEG文件，编码同样质量的WebP文件需要占用更多的计算资源。&lt;/p&gt;
&lt;h2 id=&quot;目前使用情况&quot;&gt;&lt;a href=&quot;#目前使用情况&quot; class=&quot;headerlink&quot; title=&quot;目前使用情况&quot;&gt;&lt;/a&gt;目前使用情况&lt;/h2&gt;&lt;p&gt;国外的网站：Youtube、Facebook.etc&lt;br&gt;国内的网站：腾讯、淘宝、美团等&lt;br&gt;
    
    </summary>
    
      <category term="移动端性能优化" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>viewport</title>
    <link href="http://yoursite.com/2016/04/25/viewport/"/>
    <id>http://yoursite.com/2016/04/25/viewport/</id>
    <published>2016-04-25T13:48:12.219Z</published>
    <updated>2016-05-07T08:47:38.848Z</updated>
    
    <content type="html">&lt;h2 id=&quot;viewport的概念&quot;&gt;&lt;a href=&quot;#viewport的概念&quot; class=&quot;headerlink&quot; title=&quot;viewport的概念&quot;&gt;&lt;/a&gt;viewport的概念&lt;/h2&gt;&lt;h3 id=&quot;layout-viewport&quot;&gt;&lt;a href=&quot;#layout-viewport&quot; class=&quot;headerlink&quot; title=&quot;layout viewport&quot;&gt;&lt;/a&gt;layout viewport&lt;/h3&gt;&lt;p&gt;通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图是一些设备上浏览器的默认viewport的宽度。&lt;img src=&quot;/2016/04/25/viewport/icon1.png&quot; alt=&quot;icon1.png&quot; title=&quot;&quot;&gt;这个layout viewport的宽度可以通过 document.documentElement.clientWidth 来获取。&lt;br&gt; &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;visual-viewport&quot;&gt;&lt;a href=&quot;#visual-viewport&quot; class=&quot;headerlink&quot; title=&quot;visual viewport&quot;&gt;&lt;/a&gt;visual viewport&lt;/h3&gt;&lt;p&gt;它是在不同的缩放（initial-scale）情况下浏览器可视区域的大小（需要多少css像素填充），visual viewport的宽度可以通过window.innerWidth 来获取，但在Android 2, Oprea mini 和 UC 8中无法正确获取。&lt;/p&gt;
&lt;h3 id=&quot;ideal-viewport&quot;&gt;&lt;a href=&quot;#ideal-viewport&quot; class=&quot;headerlink&quot; title=&quot;ideal viewport&quot;&gt;&lt;/a&gt;ideal viewport&lt;/h3&gt;&lt;p&gt;这个viewport可以理解为最适合当前机型的viewport。不同的手机的可能拥有不同的ideal viewport,一般iphone手机都是320px，但是安卓设备就比较复杂了，有320px的，有360px的，有384px的等等，关于不同的设备ideal viewport的宽度都为多少，可以到&lt;a href=&quot;http://viewportsizes.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://viewportsizes.com&lt;/a&gt;去查看一下，里面收集了众多设备的理想宽度。&lt;/p&gt;
&lt;h2 id=&quot;像素的理解&quot;&gt;&lt;a href=&quot;#像素的理解&quot; class=&quot;headerlink&quot; title=&quot;像素的理解&quot;&gt;&lt;/a&gt;像素的理解&lt;/h2&gt;&lt;h3 id=&quot;物理像素-physical-pixel&quot;&gt;&lt;a href=&quot;#物理像素-physical-pixel&quot; class=&quot;headerlink&quot; title=&quot;物理像素(physical pixel)&quot;&gt;&lt;/a&gt;物理像素(physical pixel)&lt;/h3&gt;&lt;p&gt;一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。&lt;/p&gt;
&lt;h3 id=&quot;设备独立像素-density-independent-pixel&quot;&gt;&lt;a href=&quot;#设备独立像素-density-independent-pixel&quot; class=&quot;headerlink&quot; title=&quot;设备独立像素(density-independent pixel)&quot;&gt;&lt;/a&gt;设备独立像素(density-independent pixel)&lt;/h3&gt;&lt;p&gt;设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。&lt;/p&gt;
&lt;h3 id=&quot;设备像素比-device-pixel-ratio&quot;&gt;&lt;a href=&quot;#设备像素比-device-pixel-ratio&quot; class=&quot;headerlink&quot; title=&quot;设备像素比(device pixel ratio )&quot;&gt;&lt;/a&gt;设备像素比(device pixel ratio )&lt;/h3&gt;&lt;p&gt;定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：&lt;/p&gt;
&lt;p&gt;设备像素比 = 物理像素 / 设备独立像素 // 在某一方向上，x方向或者y方向&lt;/p&gt;
&lt;p&gt;在js中，dpr = window.devicePixelRatio&lt;/p&gt;
&lt;p&gt;在css中，可以通过-webkit-device-pixel-ratio，-webkit-min-device-pixel-ratio和 -webkit-max-device-pixel-ratio进行媒体查询，对不同dpr的设备，做一些样式适配(这里只针对webkit内核的浏览器和webview)。&lt;/p&gt;
&lt;p&gt;综合上面几个概念，一起举例说明下：&lt;/p&gt;
&lt;p&gt;以iphone6为例：设备宽高为375×667，可以理解为设备独立像素(或css像素)。&lt;br&gt;dpr为2，根据上面的计算公式，其物理像素就应该×2，为750×1334。&lt;img src=&quot;/2016/04/25/viewport/icon2.gif&quot; alt=&quot;icon2.gif&quot; title=&quot;&quot;&gt;在css像素大小不变的情况下，普通屏幕下，1个css像素 对应 1个物理像素(1:1)，retina屏幕下，1个css像素对应 4个物理像素(1:4)。&lt;/p&gt;
&lt;h2 id=&quot;meta-viewport详解&quot;&gt;&lt;a href=&quot;#meta-viewport详解&quot; class=&quot;headerlink&quot; title=&quot;meta.viewport详解&quot;&gt;&lt;/a&gt;meta.viewport详解&lt;/h2&gt;&lt;h3 id=&quot;几个概念&quot;&gt;&lt;a href=&quot;#几个概念&quot; class=&quot;headerlink&quot; title=&quot;几个概念&quot;&gt;&lt;/a&gt;几个概念&lt;/h3&gt;&lt;p&gt;一般在做移动端页面时，会把&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;这行代码复制到页面中。该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户对其进行缩放。一般，width设置layout viewport 的宽度，为一个正整数，或字符串”width-device”；initial-scale 设置页面的初始缩放值，为一个数字，可以带小数；minimum-scale允许用户的最小缩放值，为一个数字，可以带小数；maximum-scale    允许用户的最大缩放值，为一个数字，可以带小数；user-scalable    是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes代表允许。当然还可以设置其他的值，用逗号隔开就可以。&lt;/p&gt;
&lt;h3 id=&quot;width和initial-scale在移动端页面中的作用&quot;&gt;&lt;a href=&quot;#width和initial-scale在移动端页面中的作用&quot; class=&quot;headerlink&quot; title=&quot;width和initial-scale在移动端页面中的作用&quot;&gt;&lt;/a&gt;width和initial-scale在移动端页面中的作用&lt;/h3&gt;&lt;p&gt;（1）通过width=device-width，所有浏览器都能把当前的viewport宽度变成ideal viewport的宽度，但要注意的是，在iphone和ipad上，无论是竖屏还是横屏，宽度都是竖屏时ideal viewport的宽度。&lt;br&gt;（2）initial-scale的缩放是相对于ideal viewport来进行缩放的，当对ideal viewport进行100%的缩放，也就是缩放值为1的时候，得到的就是ideal viewport&lt;br&gt;（3）ideal viewport的值会取width和initial-scale两个中较大的那个值&lt;/p&gt;
&lt;h3 id=&quot;关于initial-scale的缩放&quot;&gt;&lt;a href=&quot;#关于initial-scale的缩放&quot; class=&quot;headerlink&quot; title=&quot;关于initial-scale的缩放&quot;&gt;&lt;/a&gt;关于initial-scale的缩放&lt;/h3&gt;&lt;p&gt;initial-scale是对页面就行缩放（个人理解就是缩放单位css像素的大小），测试如下，在meta中去掉width这一项，visual viewport得出如下数据：&lt;img src=&quot;/2016/04/25/viewport/icon3.png&quot; alt=&quot;This is an example image&quot; title=&quot;This is an example image&quot;&gt;从上图可以看出，在屏幕宽度不变的情况下，当initial-scale变小，预示着css像素变小，导致填充整个屏幕需要的css像素就会变多。因此，我们可以得出一个公式：visual viewport宽度 = ideal viewport宽度 / 当前缩放值&lt;/p&gt;
&lt;h3 id=&quot;关于width&quot;&gt;&lt;a href=&quot;#关于width&quot; class=&quot;headerlink&quot; title=&quot;关于width&quot;&gt;&lt;/a&gt;关于width&lt;/h3&gt;&lt;p&gt;去掉initial-scale，测试width。当width=160时，&lt;img src=&quot;/2016/04/25/viewport/icon4.png&quot; alt=&quot;This is an example image&quot; title=&quot;This is an example image&quot;&gt;这是因为有些元素把宽高都写死了，此时initial-scale=2，元素都变为原来的2倍，所以导致页面很挤。当width=1280时，&lt;img src=&quot;/2016/04/25/viewport/icon5.png&quot; alt=&quot;This is an example image&quot; title=&quot;This is an example image&quot;&gt;这是因为有些元素把宽高都写死了，此时initial-scale=2，元素都变为原来的0.25倍，所以导致页面的元素很小。&lt;/p&gt;
&lt;h3 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h3&gt;&lt;p&gt;在iphone和ipad上，无论你给viewport设的宽的是多少，如果没有指定默认的缩放值，则iphone和ipad会自动计算这个缩放值，以达到当前页面不会出现横向滚动条(或者说viewport的宽度就是屏幕的宽度)的目的。安卓设备上的initial-scale默认值好像没有方法能够得到，或者就是干脆它就没有默认值，一定要你显示的写出来这个东西才会起作用！&lt;/p&gt;
&lt;h2 id=&quot;利用meta-viewport对多屏适配布局&quot;&gt;&lt;a href=&quot;#利用meta-viewport对多屏适配布局&quot; class=&quot;headerlink&quot; title=&quot;利用meta.viewport对多屏适配布局&quot;&gt;&lt;/a&gt;利用meta.viewport对多屏适配布局&lt;/h2&gt;&lt;h3 id=&quot;retina下，border-1px问题&quot;&gt;&lt;a href=&quot;#retina下，border-1px问题&quot; class=&quot;headerlink&quot; title=&quot;retina下，border: 1px问题&quot;&gt;&lt;/a&gt;retina下，border: 1px问题&lt;/h3&gt;&lt;p&gt;经常border：1px在不同手机上的宽度不一样，如下：&lt;img src=&quot;/2016/04/25/viewport/icon6.jpg&quot; alt=&quot;This is an example image&quot; title=&quot;This is an example image&quot;&gt;上图中，对于一条1px宽的直线，它们在屏幕上的物理尺寸(灰色区域)的确是相同的，不同的其实是屏幕上最小的物理显示单元，即物理像素，所以对于一条直线，iphone5它能显示的最小宽度其实是图中的红线圈出来的灰色区域，用css来表示，理论上说是0.5px。所以，设计师想要的retina下border:1px;，其实就是1物理像素宽，对于css而言，可以认为是border: 0.5px;，这是retina下(dpr=2)下能显示的最小单位。&lt;/p&gt;
&lt;h3 id=&quot;多屏适配布局&quot;&gt;&lt;a href=&quot;#多屏适配布局&quot; class=&quot;headerlink&quot; title=&quot;多屏适配布局&quot;&gt;&lt;/a&gt;多屏适配布局&lt;/h3&gt;&lt;p&gt;移动端布局，为了适配各种大屏手机，目前最好用的方案莫过于使用相对单位rem。&lt;br&gt;rem = document.documentElement.clientWidth * dpr / 10 javascript方式，通过上面的公式，计算出基准值rem，然后写入样式。&lt;/p&gt;
&lt;p&gt;以下是淘宝的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;doc, win&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; docEl = doc.documentElement,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resizeEvt = &lt;span class=&quot;string&quot;&gt;&#39;orientationchange&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&#39;orientationchange&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;resize&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    recalc = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; clientWidth = docEl.clientWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!clientWidth) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      docEl.style.fontSize = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; * (clientWidth / &lt;span class=&quot;number&quot;&gt;320&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!doc.addEventListener) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  win.addEventListener(resizeEvt, recalc, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  doc.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;DOMContentLoaded&#39;&lt;/span&gt;, recalc, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出，他们也仅仅按照手机屏幕的宽度在做适配，没有动用dpr和scale，个人认为这两个必须同时运用，页面才会在理想情况下展现！&lt;/p&gt;
&lt;p&gt;一般方法大概如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dpr, rem, scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; docEl = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fontEl = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&#39;style&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; metaEl = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;meta[name=&quot;viewport&quot;]&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dpr = win.devicePixelRatio || &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scale = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; / dpr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rem = docEl.clientWidth * dpr / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置viewport，进行缩放，达到高清效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metaEl.setAttribute(&lt;span class=&quot;string&quot;&gt;&#39;content&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;width=&#39;&lt;/span&gt; + dpr * docEl.clientWidth + &lt;span class=&quot;string&quot;&gt;&#39;,initial-scale=&#39;&lt;/span&gt; + scale + &lt;span class=&quot;string&quot;&gt;&#39;,maximum-scale=&#39;&lt;/span&gt; + scale + &lt;span class=&quot;string&quot;&gt;&#39;, minimum-scale=&#39;&lt;/span&gt; + scale + &lt;span class=&quot;string&quot;&gt;&#39;,user-scalable=no&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置data-dpr属性，留作的css hack之用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docEl.setAttribute(&lt;span class=&quot;string&quot;&gt;&#39;data-dpr&#39;&lt;/span&gt;, dpr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 动态写入样式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docEl.firstElementChild.appendChild(fontEl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fontEl.innerHTML = &lt;span class=&quot;string&quot;&gt;&#39;html&amp;#123;font-size:&#39;&lt;/span&gt; + rem + &lt;span class=&quot;string&quot;&gt;&#39;px!important;&amp;#125;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 给js调用的，某一dpr下rem和px之间的转换函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.rem2px = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v = &lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v * rem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.px2rem: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v = &lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v / rem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.dpr = dpr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.rem = rem;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上设置是为了保证，1个css像素占据一个物理像素。如果有一个区块，在psd文件中量出：宽高750×300px的div，那么如何转换成rem单位呢？如果scale是1，对于iphone6来说就是取一半，如果scale是0.5，量出多少是多少，换句话说就是设计稿的宽度W=docEl.clientWidth * dpr，对于不符合的设计稿，计算公式如下：&lt;img src=&quot;/2016/04/25/viewport/icon7.jpg&quot; alt=&quot;This is an example image&quot; title=&quot;This is an example image&quot;&gt;我们现在写页面参考的机型一般是iphone4以上，dpr一般都是2，所以按照以上写法其实只有viewport的宽度在起作用，但是如果遇到宽度和dpr都不一样的时候，两者的倍数都会起作用，如果遇到iphone3这样的，宽度不变而dpr变化的，它上面的元素就会比iphone4要小，遇到这样的机型，如果不改变scale，样式有可能出问题！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;viewport的概念&quot;&gt;&lt;a href=&quot;#viewport的概念&quot; class=&quot;headerlink&quot; title=&quot;viewport的概念&quot;&gt;&lt;/a&gt;viewport的概念&lt;/h2&gt;&lt;h3 id=&quot;layout-viewport&quot;&gt;&lt;a href=&quot;#layout-viewport&quot; class=&quot;headerlink&quot; title=&quot;layout viewport&quot;&gt;&lt;/a&gt;layout viewport&lt;/h3&gt;&lt;p&gt;通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图是一些设备上浏览器的默认viewport的宽度。&lt;img src=&quot;/2016/04/25/viewport/icon1.png&quot; alt=&quot;icon1.png&quot; title=&quot;&quot;&gt;这个layout viewport的宽度可以通过 document.documentElement.clientWidth 来获取。&lt;br&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
</feed>
